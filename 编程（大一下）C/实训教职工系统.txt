#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct
{
	char kcm[99];//课程名称
	char xq[99];//开课学期
	char xz[99];//课程性质（必修/限选课）
	char xg[99];//教学效果
}KC;
typedef struct
{
	int zgh;//职工号
	char xm[99];//姓名
	char zc[99];//职称
	char xb[99];//性别
    KC kc[2];//2门主讲课程
	int pf;//教学效果综合评分
}JS;
struct jd
{
	JS js;//教师信息
	struct jd * xyg;//下一个
};
typedef struct jd * jgt;
jgt cjlb()//创建链表
{
	jgt head;
	head=(jgt)malloc(sizeof(struct jd));
	if(head==NULL)
		printf("创建失败\n");
	else
		head->xyg=NULL;
	return head;
}
int pd(jgt p)
{
	return p->xyg==NULL;//判断当前结点存没存下一个的地址。没存返回1，存了返回0。
}
void input(jgt head,int rs)//输入功能（input）：可以一次完成若干条记录的输入。教师人员数量最多可达到100。
{
	int i;
	jgt p1,p;
	for(i=0;i<rs;i++)
	{
		p=(jgt)malloc(sizeof(struct jd));
		if(p==NULL)
			printf("建结点失败");
		else
		{
			scanf("%d",&(*p).js.zgh);
			scanf("%s",(*p).js.xm);
			scanf("%s",(*p).js.zc);
			scanf("%s",(*p).js.xb);

			scanf("%s",(*p).js.kc[0].kcm);
			scanf("%s",(*p).js.kc[0].xq);
			scanf("%s",(*p).js.kc[0].xz);
			scanf("%s",(*p).js.kc[0].xg);
						
			scanf("%s",(*p).js.kc[1].kcm);
			scanf("%s",(*p).js.kc[1].xq);
			scanf("%s",(*p).js.kc[1].xz);
			scanf("%s",(*p).js.kc[1].xg);
							
			scanf("%d",&(*p).js.pf);
			p1=head;
			if(p->js.zgh==p1->js.zgh)
			{
					free(p);
					continue;
			}
			while(p1->xyg!=NULL)
			{
				p1=p1->xyg;
			}
			p1->xyg=p;
			p->xyg=NULL;
		}
	}
}

void display(jgt head)//显示功能（display）：完成全部教师记录的显示。
{
	jgt p;
	p=head->xyg;
	printf("%d ",(*p).js.zgh);
	printf("%s ",(*p).js.xm);
	printf("%s ",(*p).js.zc);
	printf("%s ",(*p).js.xb);

	printf("%s ",(*p).js.kc[0].kcm);
	printf("%s ",(*p).js.kc[0].xq);
	printf("%s ",(*p).js.kc[0].xz);
	printf("%s ",(*p).js.kc[0].xg);
						
	printf("%s ",(*p).js.kc[1].kcm);
	printf("%s ",(*p).js.kc[1].xq);
	printf("%s ",(*p).js.kc[1].xz);
	printf("%s ",(*p).js.kc[1].xg);
							
	printf("%d\n",(*p).js.pf);
	while(p->xyg!=NULL)
	{
		p=p->xyg;
		printf("%d ",(*p).js.zgh);
		printf("%s ",(*p).js.xm);
		printf("%s ",(*p).js.zc);
		printf("%s ",(*p).js.xb);

		printf("%s ",(*p).js.kc[0].kcm);
		printf("%s ",(*p).js.kc[0].xq);
		printf("%s ",(*p).js.kc[0].xz);
		printf("%s ",(*p).js.kc[0].xg);
						
		printf("%s ",(*p).js.kc[1].kcm);
		printf("%s ",(*p).js.kc[1].xq);
		printf("%s ",(*p).js.kc[1].xz);
		printf("%s ",(*p).js.kc[1].xg);
							
		printf("%d\n",(*p).js.pf);

	}
}
void search(char m[99],jgt p)//查找功能（search）：能够按照教师的姓名或课程名称查找教师的相关记录，并显示。如果没有查找到相关记录，输出 NO match！
{
	int i,a=5,b=5,c=5,j=0;
	for(i=0;i<100;i++)
	{
		a=strcmp((*p).js.xm,m);
		b=strcmp((*p).js.kc[0].kcm,m);
		c=strcmp((*p).js.kc[1].kcm,m);
		if(a==0||b==0||c==0)
		{
			printf("%d ",(*p).js.zgh);
			printf("%s ",(*p).js.xm);
			printf("%s ",(*p).js.zc);
			printf("%s ",(*p).js.xb);

			printf("%s ",(*p).js.kc[0].kcm);
			printf("%s ",(*p).js.kc[0].xq);
			printf("%s ",(*p).js.kc[0].xz);
			printf("%s ",(*p).js.kc[0].xg);
						
			printf("%s ",(*p).js.kc[1].kcm);
			printf("%s ",(*p).js.kc[1].xq);
			printf("%s ",(*p).js.kc[1].xz);
			printf("%s ",(*p).js.kc[1].xg);
							
			printf("%d\n",(*p).js.pf);
			a=b=c=5;
			j++;
		}
		if(p->xyg==NULL&&j==0)
			printf("NO match!\n");
		if(p->xyg==NULL)
			break;
		p=p->xyg;
	}
}
void sort(int y,jgt head)//排序功能（sort）：按照职工号或者教学效果综合评分由高至低进行排序。0按照职工号排序，1按照教学效果综合评分排序。
{
	int i,j;
	JS t;
	jgt p;
	for(i=0;i<100;i++)
	{
		p=head->xyg;
		if(y==0)
		{
			for(j=0;j<100;j++)
			{
				if((*p).js.zgh<(*(p->xyg)).js.zgh)
				{
					t=(*p).js;
					(*p).js=(*(p->xyg)).js;
					(*(p->xyg)).js=t;
				}
				p=p->xyg;
				if(p->xyg==NULL)
					break;
			}
		}
		if(y==1)
		{
			for(j=0;j<100;j++)
			{
				if(p->js.pf<(*(p->xyg)).js.pf)
				{
					t=(*p).js;
					(*p).js=(*(p->xyg)).js;
					(*(p->xyg)).js=t;
				}
				p=p->xyg;
				if(p->xyg==NULL)
					break;
			}
		}
	}
}
void insert(jgt head)//插入功能（insert）：插入一条教师记录。
{
	jgt p1,p;
	p=(jgt)malloc(sizeof(struct jd));
	if(p==NULL)
		printf("建结点失败");	
	else
	{
		scanf("%d",&(*p).js.zgh);
		scanf("%s",(*p).js.xm);
		scanf("%s",(*p).js.zc);
		scanf("%s",(*p).js.xb);

		scanf("%s",(*p).js.kc[0].kcm);
		scanf("%s",(*p).js.kc[0].xq);
		scanf("%s",(*p).js.kc[0].xz);
		scanf("%s",(*p).js.kc[0].xg);
						
		scanf("%s",(*p).js.kc[1].kcm);
		scanf("%s",(*p).js.kc[1].xq);
		scanf("%s",(*p).js.kc[1].xz);
		scanf("%s",(*p).js.kc[1].xg);
							
		scanf("%d",&(*p).js.pf);
		p1=head;
		while(p1->xyg!=NULL)
		{
			p1=p1->xyg;
		}
		p1->xyg=p;
		p->xyg=NULL;
	}
}
void change(jgt head)//修改功能（change）：按照职工号修改一条教师记录。
{
	int k;
	jgt p;
	p=head->xyg;
	scanf("%d",&k);
	while(k!=p->js.zgh)
	{
		p=p->xyg;
	}
	scanf("%d",&(*p).js.zgh);
	scanf("%s",(*p).js.xm);
	scanf("%s",(*p).js.zc);
	scanf("%s",(*p).js.xb);

	scanf("%s",(*p).js.kc[0].kcm);
	scanf("%s",(*p).js.kc[0].xq);
	scanf("%s",(*p).js.kc[0].xz);
	scanf("%s",(*p).js.kc[0].xg);
						
	scanf("%s",(*p).js.kc[1].kcm);
	scanf("%s",(*p).js.kc[1].xq);
	scanf("%s",(*p).js.kc[1].xz);
	scanf("%s",(*p).js.kc[1].xg);
					
	scanf("%d",&(*p).js.pf);
}
void Delete(jgt head)//删除功能（delete）：按照教师的姓名删除一条教师记录。
{
	char m[99];
	jgt p,p1;
	scanf("%s",&m);
	p=head;
	p1=p->xyg;
	while(strcmp(p1->js.xm,m)!=0)
	{
		p=p->xyg;
		p1=p1->xyg;
	}
	p->xyg=p1->xyg;
	free(p1);
}
int quit()//退出功能（quit）退出程序
{
	return 1;
}
int main()
{
	jgt head;
	int w=0,k;
	char m[99]={0};
	char hsm[99]={0};
	head=cjlb();
	while(0==0)
	{
		scanf("%s",&hsm);
		if(strcmp(hsm,"input")==0)
		{
			scanf("%d",&k);
			input(head,k);
		}
		if(strcmp(hsm,"display")==0)
		{
			display(head);
		}
		if(strcmp(hsm,"search")==0)
		{
			scanf("%s",&m);
			search(m,head);
		}
		if(strcmp(hsm,"sort")==0)
		{
			scanf("%d",&k);
			sort(k,head);
		}
		if(strcmp(hsm,"insert")==0)
		{
			insert(head);
		}
		if(strcmp(hsm,"change")==0)
		{
			change(head);
		}
		if(strcmp(hsm,"delete")==0)
		{
			Delete(head);
		}
		if(strcmp(hsm,"quit")==0)
		{
			w=quit();
		}
		if(w==1)
			break;
	}
	return 0;
}