#include<stdio.h>
#include<string.h>
#include<math.h>
#include<malloc.h>
typedef int ElemType;

typedef struct BTNode//二叉链表储存结构
{
    ElemType key;
    struct BTNode *lchild, *rchild;
} BTNode, *BSTree;

BSTree InsertBST(BSTree T, BTNode *s)//创建
{
    if(T == NULL)
        T = s;
    else
    {
        if(s->key < T->key)
            T->lchild = InsertBST(T->lchild, s);
        else
        {
            if(s->key > T->key)
                T->rchild = InsertBST(T->rchild, s);
        }
    }
    return T;
}
void zx(BSTree b)//中序
{
	if(b!=NULL)
	{
		zx(b->lchild);
		printf("%d ",b->key);
		zx(b->rchild);
	}
}
BSTree CreateBST()//输入
{
    BSTree T, s;
    int key;
    T = NULL;
    printf("输入关键字建立二叉排序树(输入-1结束)(例如:45 24 53 45 12 24 90 –1)。\n请输入:");
    while(1)
    {
        scanf("%d", &key);
        if(key == -1)
		{
			printf("建立成功!\n");
            break;
		}
        else
        {
            s = (BTNode*)malloc(sizeof(BTNode));
            s->key = key;
            s->lchild = NULL;
            s->rchild = NULL;
            T = InsertBST(T, s);
        }
    }
    return T;
}

BTNode *SearchBST(BSTree T, int key)//查找
{
    if(T == NULL)
        return NULL;
    else
    {
        if(key == T->key) 
            return T;
        else
        {
            if(key < T->key)
                return (SearchBST(T->lchild, key));
            else
                return (SearchBST(T->rchild, key));
        }
    }
}

BSTree InsertBST_key(BSTree T, int key)//插入
{
    BTNode *s;
    s = SearchBST(T, key);
    if(s)
        printf("关键字%d已存在!\n", s->key);
    else
    {
        s = (BTNode*)malloc(sizeof(BTNode));
        s->key = key;
        s->lchild = NULL;
        s->rchild = NULL;
        T = InsertBST(T, s);
        printf("插入成功!\n");
    }
    return T;
}

BTNode *SearchBST_F(BSTree T, int key, BSTree *F)//删除1.1
{
    if(T == NULL)
        return NULL;
    if(key == T->key)
        return T;
    else
    {
        *F = T;
        if(key < T->key)
            return (SearchBST_F(T->lchild, key, F));
        else
            return (SearchBST_F(T->rchild, key, F));
    }
}
BSTree deleteBST(BSTree T, BTNode *p, BTNode *f)//删除1.2
{
     
    BTNode *par, *s;
    int kind;
    if(!p->lchild && !p->rchild)
        kind = 1; 
    else  if (!p->rchild)
        kind = 2; 
    else  if(!p->lchild)
        kind = 3; 
    else
        kind = 4; 
    switch(kind)
    {
		case 1:
			if(!f)
				T = NULL;
			else
			{
				if(f->lchild == p)
					f->lchild = NULL;
				else
					f->rchild = NULL;
				free(p);
			}
			break;
		case 2:
			if(!f)
				T = p->lchild;
			else
			{
				if(p == f->lchild)
					f->lchild = p->lchild;
				else
					f->rchild = p->lchild;
			}
			free(p);
			break;
		case 3:
			if(!f)
				T = p->rchild;
			else
			{
				if(p == f->lchild)
					f->lchild = p->rchild;
				else
					f->rchild = p->rchild;
			}
			free(p);
			break;
		case 4:
			par = p;
			s = p->lchild;
			while(s->rchild != NULL)
			{
				par = s;
				s = s->rchild;
			}
			p->key = s->key;
			if(par == p)
				par->lchild = s->lchild;
			else
				par->rchild = s->lchild;
			free(s);
			break;
    }
    return T;
}
BSTree SearchDeleteBST(BSTree T, int key)//删除1.0
{
    BTNode *f, *p;
    f = NULL;
    p = SearchBST_F(T, key, &f);//删除1.1
    if(p)
    {
        T = deleteBST(T, p, f);//删除1.2
		printf("删除成功!\n");
    }
    else
        printf("删除失败!该关键字不存在\n");
    return T;
}
int main()
{
    BSTree T,T1;
    int c,key;
   	printf("        *********************************************************************************************************\n");	
	printf("        *********************************************************************************************************\n");	
	printf("        **                                    二叉排序树应用                                                   **\n");		
	printf("        **                              1.建立二叉排序树                                                       **\n");
	printf("        **                              2.查找                                                                 **\n");
	printf("        **                              3.插入                                                                 **\n");
	printf("        **                              4.删除                                                                 **\n");
	printf("        **                              5.结束程序                                                             **\n");
	printf("        **                              6.查看菜单                                                             **\n");
	printf("        *********************************************************************************************************\n");
	printf("        *********************************************************************************************************\n");
	printf("        注释：1.按（1——6）选择功能\n");
    while(1)
    {
		printf("\n*****************************************\n");
		printf("功能:");
        scanf("%d",&c);
        if(c==1)
		{
            T=CreateBST();
			printf("二叉排序树中序遍历:");
			zx(T);
		}
        if(c==2)
		{
            printf("输入查找的关键字:");
            scanf("%d",&key);
            T1=SearchBST(T,key);
			if(T1==NULL)
				printf("查找失败!该关键字不存在\n");
			else
				printf("查找成功!该关键字存在\n");
		}
        if(c==3)
        {
            printf("输入要插入的关键字:");
            scanf("%d",&key);
            T=InsertBST_key(T,key);
			printf("插入后中序遍历:");
			zx(T);
		}
        if(c==4)
		{
            printf("输入要删除的关键字:");
            scanf("%d",&key);
            T=SearchDeleteBST(T,key);
			printf("删除后中序遍历:");
			zx(T);
		}
        if(c==5)
			break;
		if(c==6)
		{
			printf("        *********************************************************************************************************\n");	
			printf("        *********************************************************************************************************\n");	
			printf("        **                                    二叉排序树应用                                                   **\n");		
			printf("        **                              1.建立二叉排序树                                                       **\n");
			printf("        **                              2.查找                                                                 **\n");
			printf("        **                              3.插入                                                                 **\n");
			printf("        **                              4.删除                                                                 **\n");
			printf("        **                              5.结束程序                                                             **\n");
			printf("        **                              6.查看菜单                                                             **\n");
			printf("        *********************************************************************************************************\n");
			printf("        *********************************************************************************************************\n");
			printf("        注释：1.按（1——6）选择功能\n");
		}

    }
    return 0;
}





