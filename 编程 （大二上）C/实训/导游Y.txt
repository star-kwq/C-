#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define INF 32767
#define M 20
int dist[M][M];//距离
int path[M][M];//路径
int Stack[M];//路径栈
int top=0;//栈顶
int counts;//记录路径数
int visited[M];//标记数组
typedef struct vertex//景点信息结构体
{
    int num;//景点编号
    char name[100];///景点名称
    char info[300];///景点介绍
}vertex;
typedef struct maps
{
    int n;//点数
    int m;//边数
    vertex v[M];
    int edgs[M][M];//邻接矩阵
}mg; //景点图的结构体
void Creat_vertex(mg *g)
{
    g->v[0].num=1;
    strcpy(g->v[0].name,"南门");
    strcpy(g->v[0].info,"这是西校区的正门，许多学生在此出入");
    g->v[1].num=2;
    strcpy(g->v[1].name,"图书馆");
    strcpy(g->v[1].info,"这是学生在此看书学习的地方");
    g->v[2].num=3;
    strcpy(g->v[2].name,"逸夫楼");
    strcpy(g->v[2].info,"这是西校区的教学楼，分为一教二教三教");
    g->v[3].num=4;
    strcpy(g->v[3].name,"操场");
    strcpy(g->v[3].info,"这是学生上体育课和进行体育活动的地方");
    g->v[4].num=5;
    strcpy(g->v[4].name,"落雪湖");
    strcpy(g->v[4].info,"这是学校建造的人工湖，美化了校园环境");
    g->v[5].num=6;
    strcpy(g->v[5].name,"餐厅");
    strcpy(g->v[5].info,"这是西校区的唯一的餐厅，共分为四层");
    g->v[6].num=7;
    strcpy(g->v[6].name,"地下通道");
    strcpy(g->v[6].info,"这是东西校区连接的通道");
    g->v[7].num=8;
    strcpy(g->v[7].name,"女生宿舍");
    strcpy(g->v[7].info,"这是女生的宿舍");
    g->v[8].num=9;
    strcpy(g->v[8].name,"实验楼");
    strcpy(g->v[8].info,"这里是西校区电脑机房所在地和老师的办公楼");
    g->v[9].num=10;
    strcpy(g->v[9].name,"男生宿舍");
    strcpy(g->v[9].info,"这是男生的宿舍");
}
void Creat_maps(mg *g)
{
    int i,j;
    g->n=10;//10个景点
    g->m=16;//16条双向路径
    for(i=0; i<g->n; i++) //初始化邻接矩阵
    {
        for(j=0; j<g->n; j++)
        {
            g->edgs[i][j]=INF;
        }
    }
    g->edgs[0][1]=g->edgs[1][0]=40;//写入边的信息
    g->edgs[0][2]=g->edgs[2][0]=45;
    g->edgs[1][2]=g->edgs[2][1]=30;
    g->edgs[1][3]=g->edgs[3][1]=60;
    g->edgs[2][3]=g->edgs[3][2]=100;
    g->edgs[2][4]=g->edgs[4][2]=80;
    g->edgs[2][6]=g->edgs[6][2]=120;
    g->edgs[3][4]=g->edgs[4][3]=40;
    g->edgs[3][5]=g->edgs[5][3]=20;
    g->edgs[4][5]=g->edgs[5][4]=20;
    g->edgs[4][6]=g->edgs[6][4]=140;
    g->edgs[5][7]=g->edgs[7][5]=60;
    g->edgs[5][8]=g->edgs[8][5]=150;
    g->edgs[5][9]=g->edgs[9][5]=200;
    g->edgs[6][8]=g->edgs[8][6]=100;
    g->edgs[8][9]=g->edgs[9][8]=160;
}
void Search_info(mg *g)
{
    int i,n;
    printf("山东工商学院西校区的景点有：\n");
    for(i=0; i<10; i++)
    {
        printf("%d:%s\n",g->v[i].num,g->v[i].name);
    }
    while(1)
    {
        printf("\n请输入你想要查询的景点编号：");
        printf("(按-1退出)\n");
        scanf("%d",&n);
        getchar();
        if(n==-1)
        {
            break;
        }
        else if(n<0||n>10)
        {
            printf("输入有误，请重新输入！\n\n");
            continue;
        }
        else
        {
            printf("%d:%s\n",g->v[n-1].num,g->v[n-1].name);
            printf("%s\n\n",g->v[n-1].info);
        }
    }
    return ;
}
void Floyd(mg *g) //费洛伊德
{
    int i,j,k;
    for(i=0;i<g->n;i++) //初始化距离与路径矩阵
    {
        for(j=0;j<g->n;j++)
        {
            dist[i][j]=g->edgs[i][j];
            if(i!=j&&dist[i][j]<INF)
            {
                path[i][j]=i;
            }
            else
            {
                path[i][j]=-1;//-1代表不可达
            }
        }
    }
    for(k=0; k<g->n; k++)
    {
        for(i=0; i<g->n; i++)
        {
            for(j=0; j<g->n; j++)
            {
                if(dist[i][j]>(dist[i][k]+dist[k][j]))
                {
                    dist[i][j]=dist[i][k]+dist[k][j];//更新
                    path[i][j]=k;         //path用于记录最短路径上的结点*/
                }
            }
        }
    }
    return ;
}
void Floyd_print(mg *g,int s, int e)
{
    if(path[s][e]==-1||path[s][e]==e||path[s][e]==s)//递归终止条件
    {
        return;
    }
    else
    {
        Floyd_print(g,s,path[s][e]);//将中间点作为终点继续打印路径
        printf("%s->",g->v[path[s][e]].name);//打印中间景点名字
        Floyd_print(g,path[s][e],e);//将中间点作为起点继续打印路径
    }
}

void Dfs_allpath(mg *g,int s,int e)
{
	int dis=0;
    int i,j;
    Stack[top]=s;
    top++;  //起点入栈
    visited[s]=1;//标记入栈
    for(i=0; i<g->n; i++)
    {
        if(g->edgs[s][i]>0&&g->edgs[s][i]!=INF&&!visited[i])
        {
            //表明两点可达且未被访问
            if(i==e)//DFS到了终点，打印路径
            {
                printf("第%d条路:",counts++);
                for(j=0; j<top; j++)
                {
                    printf("%s->",g->v[Stack[j]].name);
                    if(j<top-1)//统计路径长度
                    {
                        dis=dis+g->edgs[Stack[j]][Stack[j+1]];
                    }
                }
                dis=dis+g->edgs[Stack[top-1]][e];
                printf("%s\n",g->v[e].name);//打印终点
                printf("总长度是：%dm\n\n",dis);
            }
            else//不是终点接着Dfs
            {
                Dfs_allpath(g,i,e);
                top--;//支路全被访问一遍,顶点出栈
                visited[i]=0;//出栈点标记为已出栈，允许下次访问
            }
        }
    }
}
void Bestpath_Multispot(mg *g)
{
    int vNum[M]= {0};
    int i,j,dis;
    j=1;
    dis=0;//统计全程总长
    printf("请输入你要游览的第%d个景点的编号（输入-1结束输入）：",j);
    scanf("%d",&vNum[j-1]);
    while(vNum[j-1]!=-1&&j<10)
    {
        printf("\n请输入你要游览的第%d个景点编号：",++j);
        scanf("%d", &vNum[j-1]);
        if(vNum[j-1]==-1)
        {
            break;
        }
    }
    printf("\n这是最佳访问路径：\n\n");
    for(i=0; vNum[i]>0&&vNum[i+1]>0; i++)
    {
        printf("%s->",g->v[vNum[i]-1].name);//输出路径上的起点
        Floyd_print(g,vNum[i]-1,vNum[i+1]-1);//利用费洛依德算法
        dis+=dist[vNum[i]-1][vNum[i+1]-1];
    }
    printf("%s\n\n",g->v[vNum[j-2]-1].name);//*输出路径上的终点*/
    printf("全程总长为：%dm\n\n",dis);
}
void map()
{
	printf("西校区地图如下\n");
	printf("                                     8.女生宿舍                        \n");
	printf("                                    /                                  \n");
	printf("                                   /                                   \n");
	printf("                   4.操场----6.餐厅 -----------10.男生宿舍             \n");
	printf("                  /   /|       |  |               |                   \n");
	printf("                 /   / |       |  |               |                   \n");
	printf("          2.图书馆  /  |       |  |_____          |                   \n");
	printf("        /    |     /   |       |        |         |                   \n");
	printf("       /     |    /    |___5.落雪湖     |         |                   \n");
	printf(" 1.南门      |   /       /|             |         |                   \n");
	printf("     |       |  /  _____/ |             |         |                   \n");
	printf("     |       | /  /       |             |         |                   \n");
	printf("     |____3.逸夫楼        |             |____9.实验楼                \n");
	printf("                |         |                 /                        \n");
	printf("                |         |  ______________/                         \n");
	printf("                |         | /                                        \n");
	printf("                |___7.地下通道                                          \n");

}
void Dis_menu()
{
    printf("\n");
    printf("       ************欢迎使用山东工商学院西校区导游咨询系统***********\n\n");
    printf("                       1.景点信息查询                            \n");
    printf("                       2.两景点之间最短路查询                    \n");
    printf("                       3.两景点间所有路径查询                    \n");
    printf("                       4.多景点间访问路线查询                    \n");
    printf("                       5.退出系统                                \n");
    printf("       ***************************************************************\n");
    return ;                                                 
}

int main()
{
    int n,i;
    int start,ends;
	mg g;
    Creat_vertex(&g);
    Creat_maps(&g);
	map();
    while(1)
    {
        Dis_menu();
        printf("\n\n请输入需要操作的命令：\n");
        scanf("%d",&n);
        getchar();
        if(n<1||n>5)
        {
            printf("输入有误，请重新输入！！！\n");
            continue;
        }
        else
        {
			switch(n)
			{
              case 1:Search_info(&g);break;
			  case 2:printf("请输入起点的景点编号数字：\n");
                    scanf("%d",&start);
                    printf("请输入终点的景点编号数字：\n");
                    scanf("%d",&ends);
                    Floyd(&g);
                    printf("从%s到%s最短距离是：%dm\n",g.v[start-1].name,g.v[ends-1].name,dist[start-1][ends-1]);
                    printf("%s->",g.v[start-1].name);
                    Floyd_print(&g,start-1, ends-1);
                    printf("%s\n",g.v[ends-1].name);
					break;
			  case 3:counts=1;//起始路径数为1
                     printf("请输入起点的景点编号数字：\n");
                     scanf("%d",&start);
                     printf("请输入终点的景点编号数字：\n");
                     scanf("%d",&ends);
                     Dfs_allpath(&g,start-1,ends-1);
					 top=0;
					 for(i=0;i<M;i++)
						 Stack[i]=0;
					 for(i=0;i<M;i++)
						 visited[i]=0;
					 Floyd(&g);
                     printf("从%s到%s最短距离是：%dm\n",g.v[start-1].name,g.v[ends-1].name,dist[start-1][ends-1]);
                     printf("%s->",g.v[start-1].name);
                     Floyd_print(&g,start-1, ends-1);
                     printf("%s\n",g.v[ends-1].name);
					 break;
			  case 4: Floyd(&g);
                      Bestpath_Multispot(&g);
				      break;
			  case 5: exit(0);
				     
			}
			 }

    }
    return 0;
}