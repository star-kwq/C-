#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#define MAX 50
int earlist[MAX];
int least[MAX];
int indegree[MAX];
int outdegree[MAX];
typedef struct 
{
	char v[10];
	char w[10];
	char s[10];
}Bool;
typedef struct
{
	Bool hd[MAX];
	char td[MAX][10];
	int jz[MAX][MAX];
	int tds;
	int bs;
}Mjz;

int Locatevex(Mjz *G,char u[10])// 查找顶点在顶点向量中的下标
{
	int i,j=-1;
	for(i=0;i<G->tds;++i)
	{
		if(strcmp(G->td[i],u)==0)
		{
			j=i;
			break;
		}
	}
	return j;
}
void Gljjz(Mjz *G)//邻接矩阵
{
	int i,j,k,m,n,w,a,b;
	char v1[10],v2[10],s[10];
	printf("输入要创建的图的顶点数:");
	scanf("%d",&a);
	printf("输入要创建的图的边数:");
	scanf("%d",&b);
	G->tds=a;
    G->bs=b;
	for(i=0;i<G->tds;i++)
		for(j=0;j<G->tds;j++)
			G->jz[i][j]=0;// 初始化邻接矩阵
	printf("输入顶点信息(用字符或少于5个字符的字符串):");
	for(i=0;i<G->tds;i++)
	{
		getchar();
		scanf("%s",&(G->td[i]));
	}
	for(k=0;k<G->bs;k++)
	{
		printf("输入所有的边对应的两个顶点、活动、权值。(例如:w1 w2 a1 5):");
		getchar();
		scanf("%s %s %s %d",&v1,&v2,&s,&w);
		strcpy(G->hd[k].v,v1);
		strcpy(G->hd[k].w,v2);
		strcpy(G->hd[k].s,s);//活动  
		m=Locatevex(G,v1);// 查找顶点在顶点向量中的下标
		n=Locatevex(G,v2);
		if((m==-1)||(n==-1))
		{
			printf("%s到%s无法形成边,请重新输入\n",v1,v2);
		}
		else
		{
			G->jz[m][n]=w;//存入权值
		}
	}
}
void ljjzschu(Mjz *G)//邻接矩阵表示为
{
	int i,j;
	printf("邻接矩阵:\n");
	for(i=0;i<G->tds;i++)
	{
		for(j=0;j<G->tds;j++)
				printf("%d ",G->jz[i][j]);
		printf("\n");
	}
}
void gegree(Mjz *G)
{
	int i,j,t;
	for(i=0;i<G->tds;i++)
	{
		t=0;
		for(j=0;j<G->tds;j++)
			if(G->jz[i][j]!=0)
				t++;
	outdegree[i]=t;
	}
	for(i=0;i<G->tds;i++)
	{
		t=0;
		for(j=0;j<G->tds;j++)
			if(G->jz[j][i]!=0)
				t++;
	indegree[i]=t;
	}
}
int tupo(Mjz *G)
{
	int i,rear=0,head=0;
	int qune[MAX];
	int count=0;
	int t,Max;
	for(i=0;i<G->tds;i++)
	{
		if(indegree[i]==0)
		{
			qune[rear++]=i;
		}
	}
	while(rear>head)
	{
		count++;
		t=qune[head++];
		for(i=0;i<G->tds;i++)
		{
			if(G->jz[t][i]!=0)
			{
				if(--indegree[i]==0)
				{
					qune[rear++]=i;
				}
				if(earlist[i]<earlist[t]+G->jz[t][i])
					earlist[i]=earlist[t]+G->jz[t][i];
			}
		}
	}
	if(count==G->tds)
	{
		for(i=0;i<G->tds;i++)
		{
			if(earlist[i]>Max)
				Max=earlist[i];
		}
		return Max;
	}
	else
		return -1;
}
void tupox(Mjz *G)
{
	int i,rear=0,head=0,t,h=0;
	int qune[MAX];
	char sj[MAX][10];
	for(i=0;i<G->tds;i++)
	{
		if(indegree[i]==0)
		{
			qune[rear++]=i;
		}
	}
	while(rear>head)
	{
		t=qune[head++];
		strcpy(sj[h],G->td[t]);
		h++;
		for(i=0;i<G->tds;i++)
		{
			if(G->jz[t][i]!=0)
			{
				if(--indegree[i]==0)
				{
					qune[rear++]=i;
				}
			}
		}
	}
	for(i=0;i<G->tds;i++)
		printf("%s ",sj[i]);
}

void outtupo(Mjz *G)
{
	int i,rear=0,head=0;
	int qune[MAX];
	char sj[MAX][10];
	int t,h=0;
	for(i=0;i<G->tds;i++)
	{
		if(outdegree[i]==0)
		{
			qune[rear++]=i;
		}
	}
	while(rear>head)
	{
		t=qune[head++];
		strcpy(sj[h],G->td[t]);
	    h++;
		for(i=0;i<G->tds;i++)
		{

			if(G->jz[i][t]!=0)
			{
				if(--outdegree[i]==0)
				{
					qune[rear++]=i;
				}
			}
		}
	}
	for(i=0;i<G->tds;i++)
		printf("%s ",sj[i]);
}
void outtupox(Mjz *G,int EAR)
{
	int i,rear=0,head=0;
	int quna[MAX];
	int t;
	for(i=0;i<G->tds;i++)
	{
		least[i]=EAR;
		if(outdegree[i]==0)
		{
			quna[rear++]=i;
		}
	}
	while(rear>head)
	{
		t=quna[head++];
		for(i=0;i<G->tds;i++)
		{
			if((G->jz[i][t]!=0))
			{
				if(--outdegree[i]==0)
				{
					quna[rear++]=i;
				}
				if(least[i]>least[t]-G->jz[i][t])
					least[i]=least[t]-G->jz[i][t];
			}
		}
	}
}

int main()
{
	Mjz g;
	int e,i,j,t,h;		
	printf("        *********************************************************************************************************\n");	
	printf("        *********************************************************************************************************\n");	
	printf("        **                                     AOE网                                                           **\n");		
	printf("        **                 1.查看菜单                                                                          **\n");
	printf("        **                 2.建立AOE网(邻接矩阵)                                                               **\n");
	printf("        **                 3.判断此工程能否顺利进行(输出拓扑排序和逆序序列)                                    **\n");
	printf("        **                 4.求哪些子工程能影响整个工期的完工时间(输出其关键路径和关键路径长度及关键活动)      **\n");
	printf("        **                 5.结束程序                                                                          **\n");
	printf("        *********************************************************************************************************\n");
	printf("        *********************************************************************************************************\n");
	printf("        注释：1.按（1——5）选择功能\n");
	while(1)
	{
		printf("*****************************************\n");
		printf("功能:");
		scanf("%d",&t);
		getchar();
		if(t==1)
		{
			printf("        *********************************************************************************************************\n");
			printf("        *********************************************************************************************************\n");
			printf("        **                                     AOE网                                                           **\n");
			printf("        **                 1.查看菜单                                                                          **\n");
			printf("        **                 2.建立AOE网(邻接矩阵)                                                               **\n");
			printf("        **                 3.判断此工程能否顺利进行(输出拓扑排序和逆序序列)                                    **\n");
			printf("        **                 4.求哪些子工程能影响整个工期的完工时间(输出其关键路径和关键路径长度及关键活动)      **\n");
			printf("        **                 5.结束程序                                                                          **\n");
			printf("        *********************************************************************************************************\n");
			printf("        *********************************************************************************************************\n");
			printf("        注释：1.按（1——5）选择功能\n");
		}
		if(t==2) 
		{
			Gljjz(&g);
			ljjzschu(&g);
			}
		if(t==3)
		{	gegree(&g);
			printf("拓扑排序:\n");
			tupox(&g);
	        printf("\n");
			printf("逆序序列:\n");
			outtupo(&g);
			printf("\n");
		}
		if(t==4)
		{
			gegree(&g);
        	e=tupo(&g);
	        if(e!=-1)
			{
				printf("关键路径及关键活动:\n");
				for(i=0;i<g.tds;i++)
					for(j=g.tds-1;j>=0;j--)
						if((g.jz[i][j]!=0)&&(earlist[i]+g.jz[i][j]==least[j]))
						{
							printf("%s->%s",g.td[i],g.td[j]);
							for(h=0;h<g.bs;h++)
								if(strcmp(g.hd[h].v,g.td[i])==0&&strcmp(g.hd[h].w,g.td[j])==0)
									printf("(%s)\n",g.hd[h].s);
						}
				printf("关键路径长度:");
				printf("%d \n",e);
				outtupox(&g,e);
			}
		}
		if(t==5)
			break;
			
	}
	return 0;
}


